
import React from 'react';
import { Document } from '@/utils/types';
import { Button } from '@/components/ui/button';
import { FileText, Plus, RefreshCw } from 'lucide-react';
import DocumentsList from '@/components/documents/DocumentsList';
import DocumentsLoadingState from '@/components/documents/DocumentsLoadingState';
import { toast } from 'sonner';
import androidFileHandler from '@/utils/android-file-handler';

interface PetDocumentsListProps {
  documents: Document[];
  isLoading: boolean;
  onDeleteDocument: (id: string) => void;
  onEmailDocument: (document: Document) => void;
  onShareDocument: (document: Document) => void;
  onToggleFavorite: (document: Document) => void;
  onAddDocument: () => void;
  onRefreshDocuments: () => void;
  onEditDocument?: (document: Document) => void;
  petName: string;
}

const PetDocumentsList: React.FC<PetDocumentsListProps> = ({
  documents,
  isLoading,
  onDeleteDocument,
  onEmailDocument,
  onShareDocument,
  onToggleFavorite,
  onAddDocument,
  onRefreshDocuments,
  onEditDocument,
  petName
}) => {
  if (isLoading) {
    return <DocumentsLoadingState />;
  }

  if (documents.length === 0) {
    return (
      <div className="text-center py-6">
        <FileText className="h-12 w-12 mx-auto text-gray-400 mb-4" />
        <h3 className="text-lg font-medium mb-2">No documents yet</h3>
        <p className="text-gray-500 mb-4">
          Upload your first document for {petName}
        </p>
        <div className="flex flex-col sm:flex-row justify-center gap-2">
          <Button 
          onClick={(e) => {
            if (androidFileHandler.isAndroidDevice()) {
              // For Android, redirect to the standalone upload page
              e.preventDefault();
              e.stopPropagation();
              
              // Store subscription status in sessionStorage before navigation
              try {
                // Check if we already have a cached subscription status
                const cachedStatus = sessionStorage.getItem('petdocument_subscription_status');
                if (!cachedStatus) {
                  // If not, create a temporary one that assumes the user has a subscription
                  // This prevents the subscription required page from flashing
                  sessionStorage.setItem('petdocument_subscription_status', JSON.stringify({
                    hasActiveSubscription: true,
                    timestamp: Date.now()
                  }));
                }
              } catch (e) {
                // Ignore sessionStorage errors
              }
              
              // Get pet ID from URL if available
              let petId = '';
              const petMatch = window.location.pathname.match(/\/pets\/([^\/]+)/);
              if (petMatch && petMatch[1]) {
                petId = petMatch[1];
              }
              
              // Build the return path
              const returnPath = petId ? `/pets/${petId}` : '/documents';
              
              // Use window.location.replace to bypass React Router completely
              // This prevents the subscription check from happening during navigation
              window.location.replace(`/documents?${petId ? `petId=${petId}&` : ''}returnPath=${encodeURIComponent(returnPath)}`);
              
              // Prevent any further processing
              return false;
            } else {
              // For other platforms, use the standard dialog
              onAddDocument();
            }
          }}
            className="mx-auto"
          >
            <Plus size={16} className="mr-2" />
            Add Document
          </Button>
          <Button
            onClick={onRefreshDocuments}
            variant="outline"
            className="mx-auto"
          >
            <RefreshCw size={16} className="mr-2" />
            Refresh List
          </Button>
        </div>
      </div>
    );
  }

  // Create wrapper functions to adapt our handlers to match the signatures expected by DocumentsList
  const handleDocumentDeleted = () => {
    // We need to adapt the function here since DocumentsList expects a function with no parameters
    // but our parent component provides a function that takes an id parameter
    if (documents.length > 0) {
      // Using the ID of the first document as a fallback is not ideal,
      // but this is a temporary fix - in real world, we would need to know which document was deleted
      onDeleteDocument(documents[0].id);
    }
  };

  // Create wrapper functions for other document actions
  const handleEmailDocument = (doc: Document) => {
    onEmailDocument(doc);
  };
  
  const handleShareDocument = (doc: Document) => {
    onShareDocument(doc);
  };
  
  const handleToggleFavorite = (doc: Document) => {
    onToggleFavorite(doc);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between">
        <Button
          onClick={onRefreshDocuments}
          variant="outline"
          size="sm"
          className="ml-auto mr-2"
        >
          <RefreshCw size={14} className="mr-1" />
          Refresh
        </Button>
        <Button 
          onClick={(e) => {
            if (androidFileHandler.isAndroidDevice()) {
              // For Android, redirect to the standalone upload page
              e.preventDefault();
              e.stopPropagation();
              
              // Store subscription status in sessionStorage before navigation
              try {
                // Check if we already have a cached subscription status
                const cachedStatus = sessionStorage.getItem('petdocument_subscription_status');
                if (!cachedStatus) {
                  // If not, create a temporary one that assumes the user has a subscription
                  // This prevents the subscription required page from flashing
                  sessionStorage.setItem('petdocument_subscription_status', JSON.stringify({
                    hasActiveSubscription: true,
                    timestamp: Date.now()
                  }));
                }
              } catch (e) {
                // Ignore sessionStorage errors
              }
              
              // Get pet ID from URL if available
              let petId = '';
              const petMatch = window.location.pathname.match(/\/pets\/([^\/]+)/);
              if (petMatch && petMatch[1]) {
                petId = petMatch[1];
              }
              
              // Build the return path
              const returnPath = petId ? `/pets/${petId}` : '/documents';
              
              // Use window.location.replace to bypass React Router completely
              // This prevents the subscription check from happening during navigation
              window.location.replace(`/documents?${petId ? `petId=${petId}&` : ''}returnPath=${encodeURIComponent(returnPath)}`);
              
              // Prevent any further processing
              return false;
            } else {
              // For other platforms, use the standard dialog
              onAddDocument();
            }
          }}
        >
          <Plus size={16} className="mr-2" />
          Add Document
        </Button>
      </div>
      
      <DocumentsList
        documents={documents}
        onDocumentDeleted={handleDocumentDeleted}
        onEmailDocument={handleEmailDocument}
        onShareDocument={handleShareDocument}
        onToggleFavorite={handleToggleFavorite}
      />
    </div>
  );
};

export default PetDocumentsList;

