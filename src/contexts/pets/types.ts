
// Define all Pet-related types in one place
export interface Pet {
  id: string;
  name: string;
  breed: string;
  birthDate: string; // ISO format date string (YYYY-MM-DD)
  photoUrl: string;
  petIdentifier?: string; // Unique Pet ID (e.g. DM-23-1234) generated by database trigger
  archived?: boolean;
}

export interface PetsContextType {
  pets: Pet[];
  archivedPets: Pet[];
  addPet: (pet: NewPetData) => Promise<string | null>;
  deletePet: (id: string) => Promise<void>;
  updatePet: (id: string, pet: Partial<Omit<Pet, 'id'>> & { photoFile?: File }) => Promise<void>;
  restorePet: (id: string) => Promise<void>;
  permanentlyDeletePet: (id: string) => Promise<void>;
  loading: boolean;
  refetchPets: () => Promise<void>;
}

export interface NewPetData {
  name: string;
  breed: string;
  birthDate: string; // ISO format date string (YYYY-MM-DD)
  photoFile?: File;
}
