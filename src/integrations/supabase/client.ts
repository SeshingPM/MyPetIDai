// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";
import { toast } from "sonner";
import {
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  IS_PREVIEW,
  APP_ENV,
} from "@/config/env";
import logger from "@/utils/logger";

// Check if we're in a production environment directly
// Don't use the imported IS_PROD from config to avoid circular dependencies
const isProductionEnvironment = 
  process.env.NODE_ENV === 'production' ||
  (typeof window !== 'undefined' && 
   (window.location.hostname === 'mypetid.vercel.app' || 
    window.location.hostname.includes('vercel.app')));

// ONLY LOG CONNECTION DETAILS IN DEVELOPMENT
// In production, we avoid logging sensitive data
if (!isProductionEnvironment) {
  logger.devOnly("========== SUPABASE CONNECTION DETAILS ==========");
  logger.devOnly("Time of execution:", new Date().toISOString());
  logger.devOnly("Original SUPABASE_URL:", SUPABASE_URL);
  logger.devOnly(
    "Contains test DB identifier:",
    SUPABASE_URL.includes("qospdugsqnkrzomiczgc")
  );
  logger.devOnly(
    "Contains prod DB identifier:",
    SUPABASE_URL.includes("pbfyhtfusvpprzsagikq")
  );
  logger.devOnly("Environment type:", APP_ENV, { isProductionEnvironment, IS_PREVIEW });

  // Check if any script from Lovable might be interfering with environment variables
  if (typeof document !== "undefined") {
    logger.devOnly("Checking for Lovable scripts:");
    const lovableScripts = document.querySelectorAll('script[src*="lovable"]');
    logger.devOnly("Lovable scripts found:", lovableScripts.length);
    lovableScripts.forEach((script, i) => {
      const scriptSrc = script.getAttribute("src") || "unknown";
      logger.devOnly(`Script ${i}:`, scriptSrc);
    });

    // Check for global environment variable overrides
    logger.devOnly("Checking for global overrides:");
    // Using type assertion to avoid TypeScript errors when checking for potential global variables
    const win = window as any;
    if (win.SUPABASE_URL || win.supabaseUrl) {
      logger.warn(
        "WARNING: Found global override for SUPABASE_URL:",
        win.SUPABASE_URL || win.supabaseUrl
      );
    }
    if (win.SUPABASE_KEY || win.supabaseKey) {
      logger.warn("WARNING: Found global override for SUPABASE_KEY");
    }
  }
  logger.devOnly("================================================");
}

// Check if we're in a Vercel preview deployment based on the URL
// This is more reliable than environment variables which might not be set correctly
const currentUrl = typeof window !== "undefined" ? window.location.href : "";
const isVercelPreviewUrl =
  currentUrl.includes("vercel.app") && !currentUrl.includes("mypetid.vercel.app");
const isProductionDomain = currentUrl.includes("mypetid.vercel.app");

// Debug environment information - only in dev
if (!isProductionEnvironment) {
  logger.devOnly("[ENV DEBUG] Environment details:", {
    APP_ENV,
    isProductionEnvironment,
    IS_PREVIEW,
    isVercelPreviewUrl,
    isProductionDomain,
    currentUrl,
    SUPABASE_URL,
  });
}

// Force correct database for production domain
let supabaseUrl = SUPABASE_URL;
let supabaseKey = SUPABASE_ANON_KEY;

// If we're on the production domain, ensure we're using the production database
if (isProductionDomain && SUPABASE_URL.includes("qospdugsqnkrzomiczgc")) {
  logger.error("WARNING: PRODUCTION DOMAIN USING TEST DATABASE!");
  // Don't log the URLs themselves in production
  if (!isProductionEnvironment) {
    logger.error("Original URL:", SUPABASE_URL);
  }
  logger.error("Forcing production database on production domain");

  // Use environment variables instead of hardcoded values
  logger.error("APPLICATION MISCONFIGURATION: Cannot detect proper database credentials");
  logger.error("Please set correct SUPABASE_URL and SUPABASE_ANON_KEY environment variables");
  
  // Disable Supabase functionality in production when misconfigured rather than using hardcoded keys
  if (isProductionEnvironment) {
    toast.error("Configuration error. Please contact support.");
  }

  if (!isProductionEnvironment) {
    logger.error("Corrected URL:", supabaseUrl);
  }
}

// Log final connection decision - only in dev
if (!isProductionEnvironment) {
  logger.devOnly("FINAL CONNECTION DECISION:");
  logger.devOnly("Using SUPABASE_URL:", supabaseUrl);
  logger.devOnly("Is test DB?", supabaseUrl.includes("qospdugsqnkrzomiczgc"));
  logger.devOnly("Is prod DB?", supabaseUrl.includes("pbfyhtfusvpprzsagikq"));
}

// Environment validation to catch potential misconfiguration
// Only show the error on the actual production domain, not on preview URLs
if (isProductionEnvironment && !isVercelPreviewUrl) {
  // Check if production is mistakenly using test database
  if (SUPABASE_URL.includes("qospdugsqnkrzomiczgc")) {
    logger.error(
      "CRITICAL ERROR: Production environment is connecting to TEST database! " +
        "Please verify your environment variable configuration."
    );
    // Attempt to send error to monitoring or display visible warning
    try {
      // Create a visible error element for admins/developers
      const errorBanner = document.createElement("div");
      errorBanner.style.position = "fixed";
      errorBanner.style.top = "0";
      errorBanner.style.left = "0";
      errorBanner.style.right = "0";
      errorBanner.style.padding = "10px";
      errorBanner.style.backgroundColor = "red";
      errorBanner.style.color = "white";
      errorBanner.style.zIndex = "9999";
      errorBanner.style.textAlign = "center";
      errorBanner.style.fontWeight = "bold";
      errorBanner.textContent =
        "CONFIGURATION ERROR: Connected to test database in production!";
      document.body.appendChild(errorBanner);
    } catch (e) {
      // Fail silently if DOM isn't available yet
    }
  }
}

// Clean up old tokens that might be using the old storage key
if (typeof window !== "undefined" && window.localStorage) {
  try {
    // Remove the old non-environment-specific token
    const oldToken = window.localStorage.getItem("pet-care-auth-token");
    if (oldToken) {
      if (!isProductionEnvironment) {
        logger.devOnly("Found old auth token. Cleaning up...");
      }
      window.localStorage.removeItem("pet-care-auth-token");
    }
  } catch (e) {
    logger.error("Error cleaning up old tokens:", e);
  }
}

// Create environment-specific storage key to prevent login confusion
const environmentKey = supabaseUrl.includes("qospdugsqnkrzomiczgc")
  ? "pet-care-auth-token-test"
  : "pet-care-auth-token-prod";

if (!isProductionEnvironment) {
  logger.devOnly("Using storage key:", environmentKey);
}

// Create a custom type that includes our pets table
export type CustomDatabase = Database & {
  public: {
    Tables: {
      pets: {
        Row: {
          id: string;
          user_id: string;
          name: string;
          breed: string | null;
          age: number | null;
          photo_url: string | null;
          archived: boolean;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          name: string;
          breed?: string | null;
          age?: number | null;
          photo_url?: string | null;
          archived?: boolean;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          name?: string;
          breed?: string | null;
          age?: number | null;
          photo_url?: string | null;
          archived?: boolean;
          created_at?: string;
          updated_at?: string;
        };
      };
      photos: {
        Row: {
          id: string;
          user_id: string;
          pet_id: string;
          url: string;
          caption: string | null;
          created_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          pet_id: string;
          url: string;
          caption?: string | null;
          created_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          pet_id?: string;
          url?: string;
          caption?: string | null;
          created_at?: string;
        };
      };
    } & Database["public"]["Tables"];
  };
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the Supabase client with potentially forced URL/key
export const supabase = createClient<CustomDatabase>(supabaseUrl, supabaseKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: environmentKey,
  },
  global: {
    // Add default error handler
    fetch: (...args: [RequestInfo | URL, RequestInit | undefined]) => {
      // Properly typed fetch arguments
      return fetch(args[0], args[1]).catch((error) => {
        logger.error("Supabase fetch error:", error);
        toast.error(
          "Connection error. Please check your internet connection and try again."
        );
        throw error;
      });
    },
  },
});

// Add authentication state change listener with context information
supabase.auth.onAuthStateChange((event, session) => {
  // Track if this is likely a session refresh rather than a genuine new sign-in
  // We do this by checking if we already have a user ID in sessionStorage
  const previousUserId = sessionStorage.getItem('current_user_id');
  const isLikelySessionRefresh = event === 'SIGNED_IN' && 
    previousUserId && 
    previousUserId === session?.user?.id;
  
  // Store the current user ID for future reference
  if (session?.user?.id) {
    try {
      sessionStorage.setItem('current_user_id', session.user.id);
      
      // Also store the context of this auth event
      sessionStorage.setItem('auth_event_context', isLikelySessionRefresh ? 'refresh' : 'genuine');
      sessionStorage.setItem('auth_event_timestamp', Date.now().toString());
    } catch (e) {
      // Ignore sessionStorage errors
    }
  }
  
  // Trigger appropriate custom events based on the context
  if (event === "SIGNED_IN") {
    if (isLikelySessionRefresh) {
      // Trigger a session refresh event that won't cause redirects
      window.dispatchEvent(new CustomEvent("SUPABASE_SESSION_REFRESHED", { 
        detail: { userId: session?.user?.id }
      }));
    } else {
      // Trigger the regular sign-in event for genuine logins
      window.dispatchEvent(new CustomEvent("SUPABASE_AUTH_SIGNED_IN", {
        detail: { userId: session?.user?.id, isNewLogin: true }
      }));
    }
  } else if (event === "SIGNED_OUT") {
    // Clear stored user ID on sign out
    try {
      sessionStorage.removeItem('current_user_id');
      sessionStorage.removeItem('auth_event_context');
    } catch (e) {
      // Ignore sessionStorage errors
    }
    
    // Dispatch sign out event
    window.dispatchEvent(new Event("SUPABASE_AUTH_SIGNED_OUT"));
  }
});